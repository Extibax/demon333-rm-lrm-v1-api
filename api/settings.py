"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from service.cache import ElasticCache
from pathlib import Path
from datetime import timedelta
import os
import dotenv
from service import logging
import boto3
from botocore.config import Config


envfile = '.env.'+os.environ.get("PYTHON_ENV", "local")
logging.info(f"[CONFIG] reading env file {envfile}")
dotenv.read_dotenv(envfile)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", 'django-insecure-dv%!3n)41*ldv6$-z&!kq34fu4o1t!3lb)9d!(z$%1d%pn*!##')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
logging.info(f"[CONFIG] Debug: {DEBUG}")

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
logging.info(f"[CONFIG] Allowed Hosts: {ALLOWED_HOSTS}")
# Application definition

INSTALLED_APPS = [
    # 'baton',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'djoser',
    'drf_yasg',
    'corsheaders',
    'api',
    'administration',
    'product',
    'locations',
    'store',
    'views',
    'reports',
    'actionplan',
    'service',
    # 'baton.autodiscover',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.middlewares.resources_monitor.ResourceMonitorMiddleware',
    'api.middlewares.preauth.PreauthenticationMiddleware',
    'api.middlewares.cache.ElasticCacheMiddleware',
    'api.middlewares.permissions.PermissionsMiddleware',
    'api.middlewares.filters.FiltersMiddleware',
    'api.middlewares.filtering.FilteringMiddleware',
    # response middlewares
    'api.middlewares.exceptions.ExceptionHandlerMiddleware',
    'api.middlewares.sums.SumMiddleware',
    'api.middlewares.grouping.GroupingMiddleware',


]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

logging.info(
    f"[CONFIG] Connecting to database { os.environ.get('DB_HOST', 'local')} {os.environ.get('DB_SCHEMA','local')} with user {os.environ.get('DB_USER','local')}")

DATABASES = None

if (os.environ.get("DB_ENGINE", "django.db.backends.sqlite3") == 'django.db.backends.sqlite3'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif (os.environ.get("DB_ENGINE") == 'django.db.backends.mysql'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'OPTIONS': {
                'database': os.environ.get("DB_SCHEMA", "local"),
                'user': os.environ.get("DB_USER", "local"),
                'password': os.environ.get("DB_PASSWORD", "local"),
                'host': os.environ.get("DB_HOST", "local"),
                'port': 3306,
            }

        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {

    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]

}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),


    'AUTH_HEADER_TYPES': ('Bearer',),

}
# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# User Custom Model
AUTH_USER_MODEL = 'administration.User'

# Swagger settings

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    "USE_SESSION_AUTH": False,
    "PERSIST_AUTH": True,
    "REFETCH_SCHEMA_WITH_AUTH": True,
    "DOC_EXPANSION": "none",

}

EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = bool(os.environ.get("EMAIL_USE_TLS", ""))
EMAIL_FILE_PATH = './emails'

DJOSER = {

    'SERIALIZERS': {
        'user_delete': 'administration.serializers.UserDeleteSerializer',
        'user_create': 'administration.serializers.UserRegistrationSerializer',
        'current_user': 'administration.serializers.UserSerializer',
        'user': 'administration.serializers.UsersSerializer',
    }

}

# CORS
cors = os.environ.get(
    "CORS_ALLOWED_DOMAINS", "*").split(",")
logging.info("[CONFIG] CORS allowed domains: " + str(cors))
CORS_ALLOW_ALL_ORIGINS = os.environ.get("CORS_ALLOW_ALL_ORIGINS", "1") == "1"
logging.info("[CONFIG] CORS ALLOW ALL: " + str(CORS_ALLOW_ALL_ORIGINS))
CORS_ALLOWED_ORIGINS = cors
# Elastic cache settings
logging.info("[CONFIG] Elasticache allowed: " +
             os.environ.get("REDIS_ENABLED", "True"))
elastic_cache = ElasticCache(host=os.environ.get("REDIS_HOST", ""),
                             port=os.environ.get("REDIS_PORT", ""),
                             enabled=os.environ.get(
                                 "REDIS_ENABLED", "True") == "True",

                             password=os.environ.get("REDIS_PASSWORD", None),)
CACHE_URL_NAMES = [
    "cachetest",
    "cachetest2",
    "flooring",
    "filters",
    "flooring_plan",
    "weeks",
    "history_graph",
    "ranking",
    "runrate",
    "history",
    "dashboard_group",
    "dead_inventory",
    "maxweek",
    "wosData",
    "range_metrics_flooring",
    "runrate_metrics",
    "dead_inventory_v2",
    "wosData_v2",
    "inventory_metrics"
]



DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

STORAGE_CACHE_ENABLED = os.environ.get(
    "STORAGE_CACHE_ENABLED", "True") == "True"
LOAD_LAYER2 = os.environ.get("LOAD_W2","True")=="True"
LOG_RESOURCES = os.environ.get(
    "LOG_RESOURCES", "False") == "True"
logging.info("[CONFIG] Resource logging enabled: "+str(LOG_RESOURCES))
s3_config = Config(
    max_pool_connections=1000
)
s3 = boto3.client('s3', aws_access_key_id=os.environ.get("ACCESS_KEY"),
                  aws_secret_access_key=os.environ.get("SECRET_KEY"), region_name="us-east-1",config=s3_config)

ddb = boto3.client(
    'dynamodb',
    aws_access_key_id=os.environ.get("ACCESS_KEY"),
    aws_secret_access_key=os.environ.get("SECRET_KEY"),
    region_name="us-east-1"
)
